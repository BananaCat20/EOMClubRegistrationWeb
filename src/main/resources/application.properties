spring.security.oauth2.client.registration.google.client-id=216680938057-ogukb40j4dl3bcpucvr1bv24isd7uvka.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.accessTokenUri  =  https://www.googleapis.com/oauth2/v3/token
spring.security.oauth2.client.userAuthorizationUri  =  https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.tokenName = oauth_token
spring.security.oauth2.client.authenticationScheme = query
spring.security.oauth2.client.clientAuthenticationScheme = form
spring.security.oauth2.client.scope = profile email

spring.security.oauth2.resource.userInfoUri  =  https://www.googleapis.com/userinfo/v2/me
spring.security.oauth2.resource.preferTokenInfo = false

server.port=${PORT:8080}
server.address=0.0.0.0
#security.require-ssl=true
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=password1
#server.ssl.key-store-type=PKCS12
#server.tomcat.accesslog.enabled=true
#server.ssl.key-alias=tomcat
server.servlet.session.timeout = 15

#1. update (Update the schema if necessary)
#2. create (create the schema and destroy previous data)
#3. create-drop (create and then destroy the schema at the end of the session)
#4. none (disable ddl handling)
#5. validate (validate the schema , make no changes to the database)
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/club_register
spring.datasource.username=root
spring.datasource.password=
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.profiles.active=mysql

#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder = TRACE
#logging.level.org.thymeleaf = TRACE
logging.level.org.springframework.security=DEBUG
